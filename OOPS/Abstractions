
Abstraction is the principle of hiding complex details and exposing only the essential functionalities to the user. It simplifies a system by reducing its complexity, making it easier to understand, use, and maintain.

Think of a TV remote: you press a button to change the channel without needing to know the complex electronics behind the action. In programming, a function like print() is an abstraction; it lets you display text without knowing the low-level code required for the task. This makes code more manageable and reusable.

// An abstract class cannot be instantiated directly
public abstract class Animal {
    String name;

    // Abstract method: no implementation here
    public abstract void makeSound();

    // Regular method can be defined
    public void sleep() {
        System.out.println(name + " is sleeping.");
    }
}

// Dog is a concrete class that extends Animal
public class Dog extends Animal {

    public Dog(String name) {
        this.name = name;
    }

    // Provides a specific implementation for the abstract method
    @Override
    public void makeSound() {
        System.out.println(name + " barks.");
    }
}

// Cat is another concrete class
public class Cat extends Animal {

    public Cat(String name) {
        this.name = name;
    }

    @Override
    public void makeSound() {
        System.out.println(name + " meows.");
    }
}

// Main class to demonstrate the concept
public class Main {
    public static void main(String[] args) {
        // We can create objects of the concrete classes
        Animal myDog = new Dog("Buddy");
        Animal myCat = new Cat("Whiskers");

        // We call the same 'makeSound()' method on both objects
        // The JVM automatically calls the correct subclass method.
        myDog.makeSound(); // Prints "Buddy barks."
        myCat.makeSound(); // Prints "Whiskers meows."
        
        myDog.sleep(); // Prints "Buddy is sleeping."
    }
}
